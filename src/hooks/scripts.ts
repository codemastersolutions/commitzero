export const HOOK_HEADER = "# CommitZero managed block";

export function commitMsgScript(): string {
  const lines: string[] = [
    "#!/bin/sh",
    "set -eu",
    HOOK_HEADER + " START",
    "# Validate commit message using CommitZero",
    'if [ -x "./node_modules/.bin/commitzero" ]; then',
    "  ./node_modules/.bin/commitzero check",
    'elif [ -f "./node_modules/@codemastersolutions/commitzero/dist/cjs/cli/index.js" ]; then',
    "  node ./node_modules/@codemastersolutions/commitzero/dist/cjs/cli/index.js check",
    "elif node -e \"try{require.resolve('@codemastersolutions/commitzero/dist/cjs/cli/index.js');process.exit(0);}catch(e){process.exit(1)}\" >/dev/null 2>&1; then",
    '  node "$(node -p \'require.resolve("@codemastersolutions/commitzero/dist/cjs/cli/index.js")\')" check',
    "else",
    "  # Auto-clean managed blocks from hooks to avoid future interruptions",
    "  START_MARK='" + HOOK_HEADER + " START'",
    "  END_MARK='" + HOOK_HEADER + " END'",
    "  cleanup_file() {",
    '    F="$1"',
    '    if [ -f "$F" ]; then',
    '      awk -v s="$START_MARK" -v e="$END_MARK" \'',
    "        BEGIN { skip=0 }",
    "        index($0, s) { skip=1; next }",
    "        index($0, e) { skip=0; next }",
    "        { if (!skip) print }",
    '      \' "$F" > "$F.tmp" && mv "$F.tmp" "$F" && chmod +x "$F" || true',
    "    fi",
    "  }",
    '  cleanup_file ".git/hooks/commit-msg"',
    '  cleanup_file ".git/hooks/prepare-commit-msg"',
    "",
    "  # If hooks don't exist or managed blocks were removed, stay quiet and allow commit",
    '  if [ ! -f ".git/hooks/commit-msg" ] && [ ! -f ".git/hooks/prepare-commit-msg" ]; then',
    "    exit 0",
    "  fi",
    '  if ! grep -q "$START_MARK" ".git/hooks/commit-msg" 2>/dev/null && \\',
    '     ! grep -q "$START_MARK" ".git/hooks/prepare-commit-msg" 2>/dev/null; then',
    "    exit 0",
    "  fi",
    "",
    "  # Detect package manager and recommend proper install command (shown only if cleanup failed)",
    '  PM="npm"',
    '  if [ -f "./pnpm-lock.yaml" ]; then',
    '    PM="pnpm"',
    '  elif [ -f "./yarn.lock" ]; then',
    '    PM="yarn"',
    '  elif [ -f "./bun.lockb" ]; then',
    '    PM="bun"',
    "  fi",
    '  INSTALL_CMD="npm i -D @codemastersolutions/commitzero"',
    '  if [ "$PM" = "pnpm" ]; then',
    '    INSTALL_CMD="pnpm add -D @codemastersolutions/commitzero"',
    '  elif [ "$PM" = "yarn" ]; then',
    '    INSTALL_CMD="yarn add -D @codemastersolutions/commitzero"',
    '  elif [ "$PM" = "bun" ]; then',
    '    INSTALL_CMD="bun add -d @codemastersolutions/commitzero"',
    "  fi",
    "",
    "  # If managed blocks still remain (cleanup failed), show guidance but do not block",
    "  # Detect language: env -> OS locale",
    '  LANG_CZ="en"',
    '  if [ -n "${COMMITZERO_LANG:-}" ]; then',
    '    case "${COMMITZERO_LANG}" in',
    '      pt|pt-BR|pt_br) LANG_CZ="pt" ;;',
    '      es|es-ES|es_es) LANG_CZ="es" ;;',
    '      *) LANG_CZ="en" ;;',
    "    esac",
    "  else",
    '    case "${LANG:-}" in',
    '      pt_BR*) LANG_CZ="pt" ;;',
    '      es_*) LANG_CZ="es" ;;',
    '      *) LANG_CZ="en" ;;',
    "    esac",
    "  fi",
    "",
    '  case "$LANG_CZ" in',
    "    pt)",
    "      echo \"CommitZero não encontrado. Instale com '$INSTALL_CMD'.\" 1>&2",
    "      echo \"Para remover manualmente este hook, remova as linhas entre '" +
      HOOK_HEADER +
      " START' e '" +
      HOOK_HEADER +
      " END' em '.git/hooks/commit-msg' e '.git/hooks/prepare-commit-msg'.\" 1>&2",
    "      ;;",
    "    es)",
    "      echo \"CommitZero no encontrado. Instala con '$INSTALL_CMD'.\" 1>&2",
    "      echo \"Para eliminar este hook manualmente, elimina las líneas entre '" +
      HOOK_HEADER +
      " START' y '" +
      HOOK_HEADER +
      " END' en '.git/hooks/commit-msg' y '.git/hooks/prepare-commit-msg'.\" 1>&2",
    "      ;;",
    "    *)",
    "      echo \"CommitZero not found. Install with '$INSTALL_CMD'.\" 1>&2",
    "      echo \"To remove this hook manually, delete lines between '" +
      HOOK_HEADER +
      " START' and '" +
      HOOK_HEADER +
      " END' in '.git/hooks/commit-msg' and '.git/hooks/prepare-commit-msg'.\" 1>&2",
    "      ;;",
    "  esac",
    "  exit 0",
    "fi",
    HOOK_HEADER + " END",
  ];
  return lines.join("\n");
}

export function prepareCommitMsgScript(): string {
  const lines = [
    "#!/bin/sh",
    "set -eu",
    `${HOOK_HEADER} START`,
    "# prepare-commit-msg hook (placeholder)",
    "# Keeps default behavior; may pre-fill templates in the future.",
    `${HOOK_HEADER} END`,
  ];
  return lines.join("\n");
}

export function preCommitScript(): string {
  const lines: string[] = [
    "#!/bin/sh",
    "set -eu",
    HOOK_HEADER + " START",
    "# Run pre-commit commands via CommitZero",
    'if [ -x "./node_modules/.bin/commitzero" ]; then',
    "  ./node_modules/.bin/commitzero pre-commit",
    'elif [ -f "./node_modules/@codemastersolutions/commitzero/dist/cjs/cli/index.js" ]; then',
    "  node ./node_modules/@codemastersolutions/commitzero/dist/cjs/cli/index.js pre-commit",
    "elif node -e \"try{require.resolve('@codemastersolutions/commitzero/dist/cjs/cli/index.js');process.exit(0);}catch(e){process.exit(1)}\" >/dev/null 2>&1; then",
    '  node "$(node -p \'require.resolve("@codemastersolutions/commitzero/dist/cjs/cli/index.js")\')" pre-commit',
    "else",
    "  # Auto-clean managed blocks from hooks to avoid future interruptions",
    "  START_MARK='" + HOOK_HEADER + " START'",
    "  END_MARK='" + HOOK_HEADER + " END'",
    "  cleanup_file() {",
    '    F="$1"',
    '    if [ -f "$F" ]; then',
    '      awk -v s="$START_MARK" -v e="$END_MARK" \'',
    "        BEGIN { skip=0 }",
    "        index($0, s) { skip=1; next }",
    "        index($0, e) { skip=0; next }",
    "        { if (!skip) print }",
    '      \' "$F" > "$F.tmp" && mv "$F.tmp" "$F" && chmod +x "$F" || true',
    "    fi",
    "  }",
    '  cleanup_file ".git/hooks/pre-commit"',
    "",
    "  # If hook doesn't exist or managed blocks were removed, stay quiet and allow commit",
    '  if [ ! -f ".git/hooks/pre-commit" ]; then',
    "    exit 0",
    "  fi",
    '  if ! grep -q "$START_MARK" ".git/hooks/pre-commit" 2>/dev/null; then',
    "    exit 0",
    "  fi",
    "",
    "  # Detect package manager and recommend proper install command (shown only if cleanup failed)",
    '  PM="npm"',
    '  if [ -f "./pnpm-lock.yaml" ]; then',
    '    PM="pnpm"',
    '  elif [ -f "./yarn.lock" ]; then',
    '    PM="yarn"',
    '  elif [ -f "./bun.lockb" ]; then',
    '    PM="bun"',
    "  fi",
    '  INSTALL_CMD="npm i -D @codemastersolutions/commitzero"',
    '  if [ "$PM" = "pnpm" ]; then',
    '    INSTALL_CMD="pnpm add -D @codemastersolutions/commitzero"',
    '  elif [ "$PM" = "yarn" ]; then',
    '    INSTALL_CMD="yarn add -D @codemastersolutions/commitzero"',
    '  elif [ "$PM" = "bun" ]; then',
    '    INSTALL_CMD="bun add -d @codemastersolutions/commitzero"',
    "  fi",
    "",
    "  # Detect language: env -> OS locale",
    '  LANG_CZ="en"',
    '  if [ -n "${COMMITZERO_LANG:-}" ]; then',
    '    case "${COMMITZERO_LANG}" in',
    '      pt|pt-BR|pt_br) LANG_CZ="pt" ;;',
    '      es|es-ES|es_es) LANG_CZ="es" ;;',
    '      *) LANG_CZ="en" ;;',
    "    esac",
    "  else",
    '    case "${LANG:-}" in',
    '      pt_BR*) LANG_CZ="pt" ;;',
    '      es_*) LANG_CZ="es" ;;',
    '      *) LANG_CZ="en" ;;',
    "    esac",
    "  fi",
    "",
    '  case "$LANG_CZ" in',
    "    pt)",
    "      echo \"CommitZero não encontrado. Instale com '$INSTALL_CMD'.\" 1>&2",
    "      echo \"Para remover manualmente este hook, remova as linhas entre '" +
      HOOK_HEADER +
      " START' e '" +
      HOOK_HEADER +
      " END' em '.git/hooks/pre-commit'.\" 1>&2",
    "      ;;",
    "    es)",
    "      echo \"CommitZero no encontrado. Instala con '$INSTALL_CMD'.\" 1>&2",
    "      echo \"Para eliminar este hook manualmente, elimina las líneas entre '" +
      HOOK_HEADER +
      " START' y '" +
      HOOK_HEADER +
      " END' en '.git/hooks/pre-commit'.\" 1>&2",
    "      ;;",
    "    *)",
    "      echo \"CommitZero not found. Install with '$INSTALL_CMD'.\" 1>&2",
    "      echo \"To remove this hook manually, delete lines between '" +
      HOOK_HEADER +
      " START' and '" +
      HOOK_HEADER +
      " END' in '.git/hooks/pre-commit'.\" 1>&2",
    "      ;;",
    "  esac",
    "  exit 0",
    "fi",
    HOOK_HEADER + " END",
  ];
  return lines.join("\n");
}
