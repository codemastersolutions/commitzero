name: Release and Checks

on:
  pull_request:
    branches:
      - dev
      - main
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - closed

permissions:
  contents: write
  packages: write

env:
  NODE_VERSION: '18.x'
  NPM_REGISTRY: 'https://registry.npmjs.org'
  BUMP: 'patch'

jobs:
  checks:
    name: Checagens de PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Instalar dependências
        run: npm ci

      - name: Verificar READMEs
        run: npm run verify:readmes

      - name: Lint
        run: npm run lint

      - name: Executar testes
        run: npm test

  release:
    name: Release após merge na main
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: main

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: "${{ env.NODE_VERSION }}"
          registry-url: "${{ env.NPM_REGISTRY }}"

      - name: Instalar dependências
        run: npm ci

      - name: Verificar READMEs
        run: npm run verify:readmes

      - name: Lint
        run: npm run lint

      - name: Executar testes
        run: npm test

      - name: Build
        run: npm run build

      - name: Configurar Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Incrementar versão sem tag e evitar conflito
        shell: bash
        run: |
          # Garantir que tags estão disponíveis localmente
          git fetch --tags --prune --quiet

          # Ler versão atual e preparar incremento progressivo
          CURRENT=$(node -p "require('./package.json').version")
          echo "Versão atual em package.json: $CURRENT"
          NEXT="$CURRENT"
          # Incrementa até achar uma tag livre
          while git rev-parse -q --verify "refs/tags/v$NEXT" >/dev/null; do
            echo "Tag v$NEXT já existe. Incrementando ${{ env.BUMP }}..."
            npm version "${{ env.BUMP }}" --no-git-tag-version
            NEXT=$(node -p "require('./package.json').version")
            echo "Nova versão candidata: $NEXT"
          done

          # Commit das mudanças de versão
          git add package.json package-lock.json || true
          git commit -m "chore(release): v$NEXT"

          # Criar tag anotada para a nova versão
          git tag -a "v$NEXT" -m "chore(release): v$NEXT"

      - name: Push e tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push --follow-tags

      - name: Determinar versão
        id: pkg
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Criar Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ steps.pkg.outputs.version }}"
          generateReleaseNotes: 'true'
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Publicar no npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public